{
    "docs": [
        {
            "location": "/",
            "text": "Introduction\n\n\nWelcome to the Arduino tutorials!\n\n\nIn this series, you will learn basic electrical engineering and programming to build several fun projects. These will include various sensors, motors, and displays.\n\n\nOrganization\n\n\nIf this is your first time using an Arduino, please go through our first few courses in the introduction section of the lessons page (next page). These lessons will give you all of the skills necessary to build our projects.\n\n\nAfter going through the lessons in the introduction section, you are welcome to go through the rest of the lessons in any order you please. These lessons are split into two types:\n\n\nProjects\n\n\nProjects are fun lessons that walk you through how to a simple project that can normally be done in one session. These have varying difficulties, so do higher difficulty lessons at your own risk.\n\n\nKit Component Lessons\n\n\nYour Arduino kit has many sensors, lights, motors, and displays. If you have an idea for your own project or you simply want to learn about the various components, these lessons are for you.\n\n\nOn some of these lessons I got kind of lazy so you might find links to tutorials on other websites. There are a lot of components in the kit and I can't write lessons for them all.",
            "title": "Home"
        },
        {
            "location": "/#introduction",
            "text": "Welcome to the Arduino tutorials!  In this series, you will learn basic electrical engineering and programming to build several fun projects. These will include various sensors, motors, and displays.",
            "title": "Introduction"
        },
        {
            "location": "/#organization",
            "text": "If this is your first time using an Arduino, please go through our first few courses in the introduction section of the lessons page (next page). These lessons will give you all of the skills necessary to build our projects.  After going through the lessons in the introduction section, you are welcome to go through the rest of the lessons in any order you please. These lessons are split into two types:",
            "title": "Organization"
        },
        {
            "location": "/#projects",
            "text": "Projects are fun lessons that walk you through how to a simple project that can normally be done in one session. These have varying difficulties, so do higher difficulty lessons at your own risk.",
            "title": "Projects"
        },
        {
            "location": "/#kit-component-lessons",
            "text": "Your Arduino kit has many sensors, lights, motors, and displays. If you have an idea for your own project or you simply want to learn about the various components, these lessons are for you.  On some of these lessons I got kind of lazy so you might find links to tutorials on other websites. There are a lot of components in the kit and I can't write lessons for them all.",
            "title": "Kit Component Lessons"
        },
        {
            "location": "/lessons/",
            "text": "Lessons\n\n\nIntroduction\n\n\n\n\nWhat is an Arduino?\n\n\nElectrical Engineering Basics\n\n\nProgramming Basics\n\n\n\n\nProjects\n\n\n\n\nSmart Flashlight\n\n\nLight Show\n\n\nRoulette\n\n\nCamera Stabilizer\n\n\nJoystick Fan\n\n\nRadar\n\n\nHovercraft\n\n\n\n\nKit Components\n\n\n\n\nLED (light)\n\n\nResistor\n\n\nDistance sensor\n\n\nPhotoresistor\n\n\nFan\n\n\nServo\n\n\nJoystick",
            "title": "Lessons Index"
        },
        {
            "location": "/lessons/#lessons",
            "text": "",
            "title": "Lessons"
        },
        {
            "location": "/lessons/#introduction",
            "text": "What is an Arduino?  Electrical Engineering Basics  Programming Basics",
            "title": "Introduction"
        },
        {
            "location": "/lessons/#projects",
            "text": "Smart Flashlight  Light Show  Roulette  Camera Stabilizer  Joystick Fan  Radar  Hovercraft",
            "title": "Projects"
        },
        {
            "location": "/lessons/#kit-components",
            "text": "LED (light)  Resistor  Distance sensor  Photoresistor  Fan  Servo  Joystick",
            "title": "Kit Components"
        },
        {
            "location": "/intro/what-is-an-arduino/",
            "text": "What is an Arduino?\n\n\nTo put it simply, an Arduino is a simple, small, easily programmable microcontroller. This means it can:\n\n\n\n\ncontrol stuff like lights, motors, and displays\n\n\nread data from sensors, like potentiometers or distance sensors\n\n\nbe programmed for your own needs\n\n\n\n\nThe Arduino is relatively popular and very cheap. It is also very easy to use and program, making it ideal for beginners.",
            "title": "What is an Arduino?"
        },
        {
            "location": "/intro/what-is-an-arduino/#what-is-an-arduino",
            "text": "To put it simply, an Arduino is a simple, small, easily programmable microcontroller. This means it can:   control stuff like lights, motors, and displays  read data from sensors, like potentiometers or distance sensors  be programmed for your own needs   The Arduino is relatively popular and very cheap. It is also very easy to use and program, making it ideal for beginners.",
            "title": "What is an Arduino?"
        },
        {
            "location": "/intro/electrical-engineering/",
            "text": "Electrical Engineering Basics\n\n\nAs many of you already probably know, electricity is used to turn lights on, move motors, and make displays work. The strength of the electricity can be measured in two ways:\n\n\n\n\nVoltage: The amount of potential between 2 terminals, usually two poles of a battery. The lower potential is usually labeled as Ground, GND, or - (on a battery). This is measured in Volts.\n\n\nCurrent: The number of electrons flowing through a circuit per second. This is measured in Amps (A) or more commonly milliamps (mA) because an Amp is very large.\n\n\n\n\nEvery component in a circuit also has a resistance. Resistance limits the current flow, and is measured in Ohms or kiloOhms. Obviously, lights, motors, and displays all have resistances, but just plain wires have resistances as well (albeit very small).\n\n\nIf this isn't making any sense at all, that's perfectly fine. To make things easier to understand, electricity is often compared to a water tank:\n\n\n\n\nVoltage can be seen as the height of the tank, current can be seen as the size of the pipe letting water out, and any bumps or squeezes in the pipe cause resistance. In most cases, you have direct control over voltage and resistance, but not current. This will be explained later.\n\n\nPreparing for circuit\n\n\nBefore we start building our first circuit, we should first learn about the different components we are using:\n\n\n\n\n\n\nArduino: By this point, you probably already know what an Arduino is, but here are some things about it you probably didn't know:\n\n\nHas 20 digital Input/Output pins. (digital pins either output 0 volts or 5 volts, never in between. We will go over the other type, analog, later)\n\n\nPins can be programmed to either output 5V or 0V.\n\n\nYou can connect stuff to pins, like lights, and program them to turn on, blink, etc.\n\n\n\n\n\n\nEach pin can provide 5 volts at 40 mA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBreadboard: A breadboard is used for creating circuits easily. They are very easy to use, you just plug wires into the holes. They are also great for prototyping circuits, but not very good for permanent ones.\n\n\nThere are also connections under the pins that connect them in a certain way. You can see how the pins are connected below:\n\n\n\n\n\n\n\n\n\n\nConnect the power pins from the Arduino the \"power rail\" of the breadboard as shown below. This is so that power connections can be done more easily in the future. They won't be too useful in this circuit though, as there will not be too many things requiring power (just the LED).\n\n\n\n\nOkay, let's learn about some more components!\n\n\n\n\nResistor: A resistor limits the flow of current, adding resistance to the circuit. It is used almost everywhere in even the most basic circuits. Resistors also come in many different standard resistances. They use a very special color coding scheme. \nHere\n is an article on reading the resistor band if you are interested.\n\n\n\n\n\n\n\n\nLED: LED stands for Light Emitting Diode. The Light Emitting portion obviously means that it emits light, and the word diode means that electricity only flows one way. This means that when the light isn't shining when you first turn on the Arduino, the LED is most likely backwards and needs to be flipped around. The short wire coming from the bottom is the negative, and the long wire is the positive terminal.\n\n\nLEDs are also commonly used in series with a resistor. If too much voltage is sent to an LED, it will burn out. The 5V the Arduino sends it is definitely waaay to much, so a resistor is needed to lower the voltage before it goes to the LED.\n\n\nLEDs at normal brightness usually take away around 2V, depending on the efficiency and other factors, and operate at 0.015 Amps or 15 mA, \u00b15mA. If you don't understand this, that's fine. This will come in handy later.\n\n\n\n\n\n\n\n\nCircuit Building Time!\n\n\nTry to make this basic circuit:\n\n\n\n\nAs the photo says, plug the wire going from the LED to the Arduino into pin 13. Also, make sure the long lead of the LED is going towards pin 9, and the short lead towards ground.\n\n\nSecond, Make sure the resistor you use is a 1K resistor. They should be labeled 1K at either the top or bottom of the paper holding the resistors. If you can't see the label or they are all gone, try to find one loose in your kit. The color coding on the resistor should look like this:\n\n\n\n\nOnce this is done, congratulations! You have finished your circuit! Hopefully you can see that the electricity comes out from the programmable pin 13, travels to the LED, then the resistor, and then to ground.\n\n\nWhy 1K?\n\n\nHow did we end up choosing a 1K ohm resistor?\n\n\nAs the voltage to the LED is increased, it gets brighter and brighter, eventually causing it to burn out. LEDs may be able to take up to 2V before burning out.\n\n\nUnfortunately, the Arduino's pins provide 5V, so a resistor is needed to use up some of the voltage before it gets to the LED. If we want 1V going to the LED, that means we would need the resistor to take up 4V. This can be seen in the diagram below:\n\n\n\n\nAfter some testing, we found that a 1K resistor gave the best brightness for our LED.\n\n\nA Side Note\n\n\nA lot of times when looking at photos of circuits, they might look like this:\n\n\n\n\nThis simply another way of representing circuits. Engineers aren't always the best artists, so drawing out detailed and colorful circuits like the ones used in this lesson isn't always very easy. In a diagram like the one above, different symbols represent different elements of a circuit. The upside down triangle with a line under it is an LED, the zig-zag line is a resistor (the amount of ohms is normally labeled, in the above example it is 330 ohms), and the three lines at the bottom represent the ground pin on the Arduino. Other electrical components, such as motors, buttons, and potentiometers, have different symbols in a schematic. More about them can be learned in the kit component lessons later.\n\n\nThe Math\n\n\nAlthough an understanding of the material so far would probably be enough for the rest of the course, it is important to understand the math if you want to do any advanced experimentation. However, this is entirely optional.\n\n\nFair warning: this might get boring.\n\n\nMost basic electrical engineering is based off the equation \nV = I * R\n.\n\n\n\n\nV\n = Voltage (Volts)\n\n\nI\n = Current (Amps)\n\n\nR\n = Resistance (Ohms).\n\n\n\n\nTo understand the rest, I have to tell you that you've lied to. LEDs don't burn out because they have too much voltage, they burn out because they have too much current running through them. LEDs get their brightness from electrons flowing through them, and as electrons flow by at a greater rate (remember, current is the number of electrons flowing through a circuit per second), the brightness of the LED increases, eventually causing the LED to get so hot it burns out (more like a bright pop, not a fire).\n\n\nCurrent can't be controlled directly, and because current is proportional to resistance by the equation \nV = I * R\n, we can reduce the amount of current by increasing the amount of resistance.\n\n\nHere's what we know:\n\n\n\n\nOur LEDs are happy with around 4 mA, or 0.004 Amps of current.\n\n\nThe Arduino outputs around 5V of voltage.\n\n\nThe LED has a resistance of around 250 ohms.\n\n\n\n\nThe LED's resistance alone isn't enough to reduce the circuit's current to 4 mA.\n\n\nUsing the equation \nV = I * R\n, we can plug in the voltage supplied by the Arduino's pins and the desired current to calculate \nR\n, or the total resistance of the circuit required to lower the amperage down to 4mA.\n\n\n5V = 0.004A * R\n\n\nR = 1250 Ohms\n\n\nTherefore, we need a total resistance of 1250 ohms to reduce the current of the circuit down to 4mA, or 0.004A. The LED already supplies 250 ohms of this resistance, so we need a 1000 ohm resistor to make up for the rest of the needed resistance. This is why we chose the 1K resistor (for those who don't know, putting K at the end of a number means multiplying it by 1000).\n\n\nRemember this image?:\n\n\n\n\nWe can actually prove this correct if we calculate the voltage taken up by each component using \nV = I * R\n.\n\n\n\n\nV across LED = I of circuit(0.004 Amps) * R of LED (250 Ohms) = 1 Volt\n\n\nV across resistor = I of circuit (0.004 Amps) * R of resistor (1000 Ohms) = 4 Volts\n\n\n\n\nWhen we add up the voltage across both components, we get \n1 Volt + 4 Volts = 5 Volts\n, which is the total voltage given out by the Arduino.\n\n\nThat's all of the math for now. If you have any questions, don't hesitate to ask any of the assistants.",
            "title": "Electrical Engineering Basics"
        },
        {
            "location": "/intro/electrical-engineering/#electrical-engineering-basics",
            "text": "As many of you already probably know, electricity is used to turn lights on, move motors, and make displays work. The strength of the electricity can be measured in two ways:   Voltage: The amount of potential between 2 terminals, usually two poles of a battery. The lower potential is usually labeled as Ground, GND, or - (on a battery). This is measured in Volts.  Current: The number of electrons flowing through a circuit per second. This is measured in Amps (A) or more commonly milliamps (mA) because an Amp is very large.   Every component in a circuit also has a resistance. Resistance limits the current flow, and is measured in Ohms or kiloOhms. Obviously, lights, motors, and displays all have resistances, but just plain wires have resistances as well (albeit very small).  If this isn't making any sense at all, that's perfectly fine. To make things easier to understand, electricity is often compared to a water tank:   Voltage can be seen as the height of the tank, current can be seen as the size of the pipe letting water out, and any bumps or squeezes in the pipe cause resistance. In most cases, you have direct control over voltage and resistance, but not current. This will be explained later.",
            "title": "Electrical Engineering Basics"
        },
        {
            "location": "/intro/electrical-engineering/#preparing-for-circuit",
            "text": "Before we start building our first circuit, we should first learn about the different components we are using:    Arduino: By this point, you probably already know what an Arduino is, but here are some things about it you probably didn't know:  Has 20 digital Input/Output pins. (digital pins either output 0 volts or 5 volts, never in between. We will go over the other type, analog, later)  Pins can be programmed to either output 5V or 0V.  You can connect stuff to pins, like lights, and program them to turn on, blink, etc.    Each pin can provide 5 volts at 40 mA        Breadboard: A breadboard is used for creating circuits easily. They are very easy to use, you just plug wires into the holes. They are also great for prototyping circuits, but not very good for permanent ones.  There are also connections under the pins that connect them in a certain way. You can see how the pins are connected below:      Connect the power pins from the Arduino the \"power rail\" of the breadboard as shown below. This is so that power connections can be done more easily in the future. They won't be too useful in this circuit though, as there will not be too many things requiring power (just the LED).   Okay, let's learn about some more components!   Resistor: A resistor limits the flow of current, adding resistance to the circuit. It is used almost everywhere in even the most basic circuits. Resistors also come in many different standard resistances. They use a very special color coding scheme.  Here  is an article on reading the resistor band if you are interested.     LED: LED stands for Light Emitting Diode. The Light Emitting portion obviously means that it emits light, and the word diode means that electricity only flows one way. This means that when the light isn't shining when you first turn on the Arduino, the LED is most likely backwards and needs to be flipped around. The short wire coming from the bottom is the negative, and the long wire is the positive terminal.  LEDs are also commonly used in series with a resistor. If too much voltage is sent to an LED, it will burn out. The 5V the Arduino sends it is definitely waaay to much, so a resistor is needed to lower the voltage before it goes to the LED.  LEDs at normal brightness usually take away around 2V, depending on the efficiency and other factors, and operate at 0.015 Amps or 15 mA, \u00b15mA. If you don't understand this, that's fine. This will come in handy later.",
            "title": "Preparing for circuit"
        },
        {
            "location": "/intro/electrical-engineering/#circuit-building-time",
            "text": "Try to make this basic circuit:   As the photo says, plug the wire going from the LED to the Arduino into pin 13. Also, make sure the long lead of the LED is going towards pin 9, and the short lead towards ground.  Second, Make sure the resistor you use is a 1K resistor. They should be labeled 1K at either the top or bottom of the paper holding the resistors. If you can't see the label or they are all gone, try to find one loose in your kit. The color coding on the resistor should look like this:   Once this is done, congratulations! You have finished your circuit! Hopefully you can see that the electricity comes out from the programmable pin 13, travels to the LED, then the resistor, and then to ground.",
            "title": "Circuit Building Time!"
        },
        {
            "location": "/intro/electrical-engineering/#why-1k",
            "text": "How did we end up choosing a 1K ohm resistor?  As the voltage to the LED is increased, it gets brighter and brighter, eventually causing it to burn out. LEDs may be able to take up to 2V before burning out.  Unfortunately, the Arduino's pins provide 5V, so a resistor is needed to use up some of the voltage before it gets to the LED. If we want 1V going to the LED, that means we would need the resistor to take up 4V. This can be seen in the diagram below:   After some testing, we found that a 1K resistor gave the best brightness for our LED.",
            "title": "Why 1K?"
        },
        {
            "location": "/intro/electrical-engineering/#a-side-note",
            "text": "A lot of times when looking at photos of circuits, they might look like this:   This simply another way of representing circuits. Engineers aren't always the best artists, so drawing out detailed and colorful circuits like the ones used in this lesson isn't always very easy. In a diagram like the one above, different symbols represent different elements of a circuit. The upside down triangle with a line under it is an LED, the zig-zag line is a resistor (the amount of ohms is normally labeled, in the above example it is 330 ohms), and the three lines at the bottom represent the ground pin on the Arduino. Other electrical components, such as motors, buttons, and potentiometers, have different symbols in a schematic. More about them can be learned in the kit component lessons later.",
            "title": "A Side Note"
        },
        {
            "location": "/intro/electrical-engineering/#the-math",
            "text": "Although an understanding of the material so far would probably be enough for the rest of the course, it is important to understand the math if you want to do any advanced experimentation. However, this is entirely optional.  Fair warning: this might get boring.  Most basic electrical engineering is based off the equation  V = I * R .   V  = Voltage (Volts)  I  = Current (Amps)  R  = Resistance (Ohms).   To understand the rest, I have to tell you that you've lied to. LEDs don't burn out because they have too much voltage, they burn out because they have too much current running through them. LEDs get their brightness from electrons flowing through them, and as electrons flow by at a greater rate (remember, current is the number of electrons flowing through a circuit per second), the brightness of the LED increases, eventually causing the LED to get so hot it burns out (more like a bright pop, not a fire).  Current can't be controlled directly, and because current is proportional to resistance by the equation  V = I * R , we can reduce the amount of current by increasing the amount of resistance.  Here's what we know:   Our LEDs are happy with around 4 mA, or 0.004 Amps of current.  The Arduino outputs around 5V of voltage.  The LED has a resistance of around 250 ohms.   The LED's resistance alone isn't enough to reduce the circuit's current to 4 mA.  Using the equation  V = I * R , we can plug in the voltage supplied by the Arduino's pins and the desired current to calculate  R , or the total resistance of the circuit required to lower the amperage down to 4mA.  5V = 0.004A * R  R = 1250 Ohms  Therefore, we need a total resistance of 1250 ohms to reduce the current of the circuit down to 4mA, or 0.004A. The LED already supplies 250 ohms of this resistance, so we need a 1000 ohm resistor to make up for the rest of the needed resistance. This is why we chose the 1K resistor (for those who don't know, putting K at the end of a number means multiplying it by 1000).  Remember this image?:   We can actually prove this correct if we calculate the voltage taken up by each component using  V = I * R .   V across LED = I of circuit(0.004 Amps) * R of LED (250 Ohms) = 1 Volt  V across resistor = I of circuit (0.004 Amps) * R of resistor (1000 Ohms) = 4 Volts   When we add up the voltage across both components, we get  1 Volt + 4 Volts = 5 Volts , which is the total voltage given out by the Arduino.  That's all of the math for now. If you have any questions, don't hesitate to ask any of the assistants.",
            "title": "The Math"
        },
        {
            "location": "/intro/programming-basics/",
            "text": "Programming Basics\n\n\n\n\nOpen the Arduino Integrated Development Environment (IDE) and save the sketch as blink. Programs will be referred to as \u201csketches\u201d. Then type the code seen below.\n\n\nDon\u2019t just copy and paste, typing it yourself will help you learn.\n\n\nConnect the Arduino to your computer and press the download button, or hit Ctrl + u. You might need to select the serial port of the Arduino.\n\n\n\n\nint led = 9;\n\nvoid setup()\n{\n    pinMode(led, OUTPUT);\n}\n\nvoid loop()\n{\n    //blinks an LED on pin 9\n    digitalWrite(led, HIGH);\n    delay(500);\n    digitalWrite(led, LOW);\n    delay(500);\n}\n\n\n\n\nProgramming 101: Variables\n\n\n\n\nVariables store stuff\n\n\nThey have a type (what they store) and a name\n\n\nTypes include \nint\n (whole numbers without decimals), \nchar\n (a single letter), \nboolean\n (a true or false, 0 or 1 bit value), or \nstring\n (a \"string\" of characters, that can form a word or sentence).\n\n\n\n\n\n\nThe \u2018=\u2019 sign is an assignment operator. It assigns the value on the right to the variable on the left.\n\n\n\n\neg:\n  \nint led = 9;\n  char something = \u2018s\u2019;\n  boolean arduinosAreCool = true;\n  String name = \u201cJohn\u201d;\n\n\n\n\n\n\nThink of \"\nint led = 9;\n\" as \"Set led equal to 9\"\n\n\n\n\nEverytime you use the name of a variable, its value is used.\n\n\neg.\n \nint led = 8;\n pinMode(led, OUTPUT) //is the same as pinMode(8, OUTPUT);\n\n\nIf you use a variable in many places in your code, then changing the value of the variable will change its value everywhere. Plus, the name carries more meaning than just a number\n\n\n\n\nProgramming 101: Comments\n\n\n\n\nSingle-line comments start with //\n\n\nComments are not part of the the program; they exist so that people can read them and understand what the program is doing.\n\n\nThey are useful for explaining parts of the code to someone who might be reading it\n\n\nA good rule of thumb is to add comments if the code is not very clear, i.e. don\u2019t over-add comments, unless it helps you understand the code better.\n\n\nYou can add a multi-line comment as well with \n/* ... */\n\n\n\n\nProgramming 101: Functions\n\n\n\n\nA function groups a bunch of code together and gives it a name, so you can run that code anytime by \u201ccalling\u201d the function.\n\n\nA function always has parentheses after its name.\n\n\nsetup()\n, \nloop()\n, \npinMode()\n, and others are examples of functions.\n\n\nFunctions can take parameters to change the way a function is run. Parameters are always placed within the parentheses\n\n\ndelay()\n takes 1 argument of type int. That argument specifies how much to delay in milliseconds.\n\n\ndelay(1000)\n would delay for 1 second.\n\n\ndelay(500)\n would delay for half a second.\n\n\n\n\n\n\nA function is defined like this:\n\n\nvoid doSomething(int param) { }\n\n\nvoid\n is the return type. void means it doesn\u2019t return anything\n\n\ndoSomething\n is the name of the function\n\n\nOptional parameters can be added inside the parentheses. Their types have to be specified\n\n\nThe code that the function runs goes inside the curly braces\n\n\n\n\n\n\n\n\nBasic Arduino Sketch\n\n\n\n\nEvery Arduino sketch must have a \nvoid setup()\n and a \nvoid loop()\n function.\n\n\nThe \nsetup()\n function runs once when the Arduino is first started up.\n\n\nThe \nloop()\n function is an infinite loop. It runs forever after the setup() function.\n\n\nYou can add other functions as well\n\n\n\n\nSketch Review\n\n\nLet's go over the sketch one more time:\n\n\nint led = 9; //creates a variable named led that stores a number\n\nvoid setup()\n{\n    pinMode(led, OUTPUT);\n    /*\n       The pinMode function sets up a pin as either an input or an output. It\n       takes two parameters: the pin to set up (in this case the pin stored in\n       the pin variable, pin 9) and the word OUTPUT or INPUT in all caps. The\n       pin is outputting electricity to the LED, so it is an output. However, it\n       may be an input in other cases if it is necessary to read data from a\n       button or other sensor.\n    */\n}\n\nvoid loop()\n{\n    // blinks an LED on pin 9\n    digitalWrite(led, HIGH);\n    /*\n        Writes 5V to pin 9. The digitalWrite function takes two parameters: the\n        pin number and whether to output 5V (HIGH) or 0V (LOW) on that pin.\n    */\n    delay(500); // waits 500 milliseconds, or half a second\n    digitalWrite(led, LOW); // Writes 0V to pin 9\n    delay(500); // waits 500 milliseconds, or half a second\n}\n\n\n\n\nCongratulations! You are now finished with the introduction tutorial. If you have any further questions, please ask any of the assistants. We'd be glad to help.",
            "title": "Programming Basics"
        },
        {
            "location": "/intro/programming-basics/#programming-basics",
            "text": "Open the Arduino Integrated Development Environment (IDE) and save the sketch as blink. Programs will be referred to as \u201csketches\u201d. Then type the code seen below.  Don\u2019t just copy and paste, typing it yourself will help you learn.  Connect the Arduino to your computer and press the download button, or hit Ctrl + u. You might need to select the serial port of the Arduino.   int led = 9;\n\nvoid setup()\n{\n    pinMode(led, OUTPUT);\n}\n\nvoid loop()\n{\n    //blinks an LED on pin 9\n    digitalWrite(led, HIGH);\n    delay(500);\n    digitalWrite(led, LOW);\n    delay(500);\n}",
            "title": "Programming Basics"
        },
        {
            "location": "/intro/programming-basics/#programming-101-variables",
            "text": "Variables store stuff  They have a type (what they store) and a name  Types include  int  (whole numbers without decimals),  char  (a single letter),  boolean  (a true or false, 0 or 1 bit value), or  string  (a \"string\" of characters, that can form a word or sentence).    The \u2018=\u2019 sign is an assignment operator. It assigns the value on the right to the variable on the left.   eg:\n   int led = 9;\n  char something = \u2018s\u2019;\n  boolean arduinosAreCool = true;\n  String name = \u201cJohn\u201d;    Think of \" int led = 9; \" as \"Set led equal to 9\"   Everytime you use the name of a variable, its value is used.  eg.\n  int led = 8;\n pinMode(led, OUTPUT) //is the same as pinMode(8, OUTPUT);  If you use a variable in many places in your code, then changing the value of the variable will change its value everywhere. Plus, the name carries more meaning than just a number",
            "title": "Programming 101: Variables"
        },
        {
            "location": "/intro/programming-basics/#programming-101-comments",
            "text": "Single-line comments start with //  Comments are not part of the the program; they exist so that people can read them and understand what the program is doing.  They are useful for explaining parts of the code to someone who might be reading it  A good rule of thumb is to add comments if the code is not very clear, i.e. don\u2019t over-add comments, unless it helps you understand the code better.  You can add a multi-line comment as well with  /* ... */",
            "title": "Programming 101: Comments"
        },
        {
            "location": "/intro/programming-basics/#programming-101-functions",
            "text": "A function groups a bunch of code together and gives it a name, so you can run that code anytime by \u201ccalling\u201d the function.  A function always has parentheses after its name.  setup() ,  loop() ,  pinMode() , and others are examples of functions.  Functions can take parameters to change the way a function is run. Parameters are always placed within the parentheses  delay()  takes 1 argument of type int. That argument specifies how much to delay in milliseconds.  delay(1000)  would delay for 1 second.  delay(500)  would delay for half a second.    A function is defined like this:  void doSomething(int param) { }  void  is the return type. void means it doesn\u2019t return anything  doSomething  is the name of the function  Optional parameters can be added inside the parentheses. Their types have to be specified  The code that the function runs goes inside the curly braces",
            "title": "Programming 101: Functions"
        },
        {
            "location": "/intro/programming-basics/#basic-arduino-sketch",
            "text": "Every Arduino sketch must have a  void setup()  and a  void loop()  function.  The  setup()  function runs once when the Arduino is first started up.  The  loop()  function is an infinite loop. It runs forever after the setup() function.  You can add other functions as well",
            "title": "Basic Arduino Sketch"
        },
        {
            "location": "/intro/programming-basics/#sketch-review",
            "text": "Let's go over the sketch one more time:  int led = 9; //creates a variable named led that stores a number\n\nvoid setup()\n{\n    pinMode(led, OUTPUT);\n    /*\n       The pinMode function sets up a pin as either an input or an output. It\n       takes two parameters: the pin to set up (in this case the pin stored in\n       the pin variable, pin 9) and the word OUTPUT or INPUT in all caps. The\n       pin is outputting electricity to the LED, so it is an output. However, it\n       may be an input in other cases if it is necessary to read data from a\n       button or other sensor.\n    */\n}\n\nvoid loop()\n{\n    // blinks an LED on pin 9\n    digitalWrite(led, HIGH);\n    /*\n        Writes 5V to pin 9. The digitalWrite function takes two parameters: the\n        pin number and whether to output 5V (HIGH) or 0V (LOW) on that pin.\n    */\n    delay(500); // waits 500 milliseconds, or half a second\n    digitalWrite(led, LOW); // Writes 0V to pin 9\n    delay(500); // waits 500 milliseconds, or half a second\n}  Congratulations! You are now finished with the introduction tutorial. If you have any further questions, please ask any of the assistants. We'd be glad to help.",
            "title": "Sketch Review"
        },
        {
            "location": "/wip/",
            "text": "Work in Progress\n\n\nComing soon...",
            "title": "Projects"
        },
        {
            "location": "/wip/#work-in-progress",
            "text": "Coming soon...",
            "title": "Work in Progress"
        },
        {
            "location": "/wip/",
            "text": "Work in Progress\n\n\nComing soon...",
            "title": "Kit Components"
        },
        {
            "location": "/wip/#work-in-progress",
            "text": "Coming soon...",
            "title": "Work in Progress"
        }
    ]
}